import datetime
import json
import uuid
import logging

from rest_framework.views import APIView
from rest_framework.response import Response
from .validations_bank_verification import validations_bank_verification_schema
# Swagger
from drf_yasg.utils import swagger_auto_schema
from drf_yasg import openapi
#
from utilities.credmanager.credentials.aws_secrets_authentication import aws_secrets_authentication
#from kyc.credentials import KarzaKeys

logger_info = logging.getLogger('info_logs')
logger_error = logging.getLogger('error_logs')


# @permission_classes([AllowAny])
class BankVerification(APIView):
    # Swagger Descriptions start here
    OPERATIONSDESCRIPTION = """ 
    This function will verify the given bank number
    """
    PROPERTIESDESCRIPTION = {
        'user_consent': openapi.Schema(type=openapi.TYPE_STRING,
                                       description='This is the consent taken from individual to verify their bank accountr. This field takes the values as Y/N'),
        'ifsc': openapi.Schema(type=openapi.TYPE_STRING, description='This is the IFSC code of the bank where the account exists'),
        'account_number': openapi.Schema(type=openapi.TYPE_STRING,
                                              description='This is the account number to be verified')
    }
    REQUIREDLIST = ['user_consent', 'ifsc', 'account_number']
    RESPONSEDESCRIPTION = '''

    | Key Name                      | Description                                                                      | Sample                                                                    |
    | ------------------------------| ---------------------------------------------------------------------------------| --------------------------------------------------------------------------|
    | status                        | Status of the call as handled in service layer                                   | 200 - operation happend successfully. 500 if any exception is encountered |
    | message                       | Text description of the status of the call                                       | PAN Verified successfully.                                                |
    | request_details:              | Describes the performance and tracking parameters of the request at service layer|                                                                           |
    | --- service_request_id        | Unique identifier generated by service layer to identify any particular request  | eee8b758-dc4b-11ec-99a6-6480998f798c                                      |
    | --- service_initiation_time   | Time at which the third party API was called                                     | 2022-05-25T22:28:42.118052                                                |
    | --- service_duration          | Time taken by third party to return the output (ms)                              | 0.923716                                                                  |
    | payload                       | Output as received by calling the 3rd Party API (please refer the respective 3rd party documentation - __Karza/documentation->Banking and Payments Authentication -> Bank AC Verification__) | |

    '''

    ################# Swagger Descriptions start here  #####################

    @swagger_auto_schema(request_body=openapi.Schema(
        type=openapi.TYPE_OBJECT,

        required=REQUIREDLIST,
        properties=PROPERTIESDESCRIPTION),
        operation_description=OPERATIONSDESCRIPTION,
        responses={200: RESPONSEDESCRIPTION})
    @aws_secrets_authentication
    @validations_bank_verification_schema
    def post(self, request):
        """
        :param request:
        :return:
        """
        logger_info.info("bank_verification Post function called")
        input_json = request.data
        output_json = views_bank_verification_json(request, input_json)
        return Response(output_json)


def views_bank_verification_json(request, input_params):
    service_name = "individual bank_verification"
    service_request_id = uuid.uuid1()
    
    logger_info.info(f"{service_name} service initiated. service request id = {service_request_id}")
    input_json, output_json = input_params, []
    output_json = dict(zip(['Status', 'Message', 'Request_details', 'Payload'],
                               [200, f"{service_name} service executed successfully"
    ]))

    logger_info.info(f"{service_name} service completed. service request id = {service_request_id}")
    return output_json

    
    logger_error.error(f"Exception Encountered {service_name} service call with "
                        f"service_request_id as {service_request_id}. Exception is : {ex}", exc_info=1)
    output_json = dict(zip(['Status', 'Message', 'Request_details', 'Payload'],
                               [500, f"Exception Encountered {service_name} service call with "
                                     f"service_request_id as {service_request_id}. Exception is : {ex}", None, None]))
    return output_json
'''
        # ######################################################
        # Configure the below piece to call third party API
        # ######################################################
    api_name_var = "individual bank_verification"
    endpoint_url_var = "/v2/bankacc"
    api_payload_var = dict(zip(["consent", "ifsc", "accountNumber"],
                                   [input_json['user_consent'], input_json['ifsc'],
                                    input_json['account_number']]))

        # ##############################################################################################
        # Configure the above piece to call third party API. No need to change anything below this line
        # ##############################################################################################

        #keys_obj = KarzaKeys()
        #third_party_response = dict(zip(["APIName", "endpoint_url", "Request", "Response", "CallTime"],
        #                                [api_name_var, endpoint_url_var, None, None, None]))
        #timestamp_one = datetime.datetime.now()

        #####################################################################################
        # Third Party API calling starts here
        #call_params = dict(zip(["api_endpoint_url", "payload"],
        #                       [endpoint_url_var, None]))
        #call_params['payload'] = api_payload_var
        #third_party_call_result = keys_obj.make_api_call(call_params)

        #third_party_response['Request'] = third_party_call_result['request_details']
        #third_party_response['Response'] = third_party_call_result['response_details']
        # Third Party API calling over
        #####################################################################################

        timestamp_two = datetime.datetime.now()
        third_party_response['CallTime'] = dict(zip(['timestamp_one', 'timestamp_two', 'time_diff'],
                                                    [timestamp_one, timestamp_two,
                                                     (timestamp_two - timestamp_one).total_seconds()]))
        output_json = dict(zip(['Status', 'Message', 'Request_details', 'Payload'],
                               [200, f"{service_name} service executed successfully",
                                dict(zip(['service_request_id', 'service_initiation_time', 'service_duration'],
                                         [service_request_id, third_party_response['CallTime']['timestamp_one'],
                                          f"{third_party_response['CallTime']['time_diff'] * 1000}ms"])),
                                third_party_response['Response']]))

        logger_info.info(f"{service_name} service completed. service request id = {service_request_id}")
        return output_json

    
        logger_error.error(f"Exception Encountered {service_name} service call with "
                        f"service_request_id as {service_request_id}. Exception is : {ex}", exc_info=1)
        output_json = dict(zip(['Status', 'Message', 'Request_details', 'Payload'],
                               [500, f"Exception Encountered {service_name} service call with "
                                     f"service_request_id as {service_request_id}. Exception is : {ex}", None, None]))
                                     return output_json
'''
